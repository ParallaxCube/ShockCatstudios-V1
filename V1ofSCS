-- Greet the local player
  local Players = game:GetService("Players")
local TextChatService = game:GetService("TextChatService")
-- Define the LocalPlayer right away so we can use their name
local localPlayer = Players.LocalPlayer 
local RBXGeneral = TextChatService:WaitForChild("TextChannels"):WaitForChild("RBXGeneral")
-- 1. Greet the local player who is running the script
if localPlayer then
    RBXGeneral:DisplaySystemMessage(string.format("Heyyy!!, %s! Your ShockCatStudio v1.034 UI is Ready!!", localPlayer.DisplayName))
end
---------------------------------------------------------------------------------------------------------------
local Rayfield = loadstring(game:HttpGet('https://raw.githubusercontent.com/ParallaxCube/v1scs/6b806f0fa79db34379bd1f3c0fcfeb0086459350/v1scs'))()
----------------------------------------------------------------------------
--rayfield /\
----------------------------------------------------------------------------

local MainWindow = Rayfield:CreateWindow({
   Name = "Welcome,"   ..  localPlayer.DisplayName .. "!",
   Icon = "paw-print", -- Icon in Topbar. Can use Lucide Icons (string) or Roblox Image (number). 0 to use no icon (default).
   LoadingTitle = "Welcome "..  localPlayer.DisplayName .. "!",
   LoadingSubtitle = "by IamSkitten",
   ShowText = " "..  localPlayer.DisplayName .."'s Ui", -- for mobile users to unhide rayfield, change if you'd like
   Theme = "Default", -- Check https://docs.sirius.menu/rayfield/configuration/themes

   ToggleUIKeybind = "K", -- The keybind to toggle the UI visibility (string like "K" or Enum.KeyCode)

   DisableRayfieldPrompts = false,
   DisableBuildWarnings = false, -- Prevents Rayfield from warning when the script has a version mismatch with the interface

   ConfigurationSaving = {
      Enabled = true,
      FolderName = "Iamskittenconfigfilenameforfile"..  localPlayer.DisplayName .. "!", -- Create a custom folder for your hub/game
      FileName = "Iamskittenconfigfilename"..  localPlayer.DisplayName .. "!"
   },

   Discord = {
      Enabled = false, -- Prompt the user to join your Discord server if their executor supports it
      Invite = "noinvitelink", -- The Discord invite code, do not include discord.gg/. E.g. discord.gg/ ABCD would be ABCD
      RememberJoins = true -- Set this to false to make them join the discord every time they load it up
   },

   KeySystem = true, -- Set this to true to use our key system
   KeySettings = {
      Title = "Untitled",
      Subtitle = "Key System for "..  localPlayer.DisplayName .. "!",
      Note = "the key is provided for "..  localPlayer.DisplayName .. " is '1234' !", -- Use this to tell the user how to get a key
      FileName = "Key41For"..  localPlayer.DisplayName .. "!", -- It is recommended to use something unique as other scripts using Rayfield may overwrite your key file
      SaveKey = false, -- The user's key will be saved, but if you change the key, they will be unable to use your script
      GrabKeyFromSite = false, -- If this is true, set Key below to the RAW site you would like Rayfield to get the key from
      Key = {"1234"} -- List of keys that will be accepted by the system, can be RAW file links (pastebin, github etc) or simple strings ("hello","key22")
   }
})
----------------------------------------------------------------------------
--Window Maker 
---------------------------------------------------------------------------- 
local MainnTab            =    MainWindow:CreateTab  (":3"                                      ,               "app-window-mac") -- Title, Image
local PlayerTab           =    MainWindow:CreateTab  (" "..  localPlayer.DisplayName .. "!"     ,                    "annoyed") -- Title, Image
local RunningTab          =    MainWindow:CreateTab  ("Stamina"                                 ,             'chevrons-right')
local WallTab             =    MainWindow:CreateTab  ("Visuals"                                 ,                   "scan-eye")
local AutomaticTab        =    MainWindow:CreateTab  ("Automation"                              ,                   'workflow')
local SpoofTab            =    MainWindow:CreateTab  ("Device"                                  ,             'laptop-minimal')
local StunTab             =    MainWindow:CreateTab  ("Stun(s)"                                 ,               'shield-alert')
local SavefileTab         =    MainWindow:CreateTab  ("Savefile!"                               ,     'gallery-horizontal-end')
local StatusTab           =    MainWindow:CreateTab  ("Status"                                  ,                 'settings-2')
local MiscTab             =    MainWindow:CreateTab  ("Misc"                                    ,                        'cog')
local GeneratorTab        =    MainWindow:CreateTab  ("Generators"                              ,                        "cog")
local ETab                =    MainWindow:CreateTab  ("Experimental"                            ,                       "bolt")
local CredsTab            =    MainWindow:CreateTab  ("Creds"                                   ,                        "cog")
local FEBETab             =    MainWindow:CreateTab  ("Fake Block Animations"                   ,                        "cog")

----------------------------------------------------------------------------
--Tabs /\ 10+
----------------------------------------------------------------------------























local Section                 = GeneratorTab:CreateSection("GeneratorGUI")
local Button                  = GeneratorTab:CreateButton({
   Name = "Gen Toggle",
   Callback = function()
        -- The function that takes place when the button is pressed
     ----------------------------------------------------------------------------
 -- The URL to your script on GitHub
      local scriptUrl = 'https://raw.githubusercontent.com/ParallaxCube/ShockCatstudios-V1/refs/heads/main/Circle%20gen%20button'  -- Replace with your actual GitHub link
      
      -- Use pcall to safely load and execute the script
      local success, result = pcall(function()
         loadstring(game:HttpGet(scriptUrl))()  -- Executes the code from GitHub
      end)

      -- If the script fails to load, notify the user
      if not success then
         notif({"Error", "There was an issue loading the script!", 2})
      else
         notif({"Success", "Script loaded successfully!", 1})
      end
----------------------------------------------------------------------------
-- The function that takes place when the button is pressed
end,
})
----------------------------------------------------------------------------
--Auto Gen Btn /\
----------------------------------------------------------------------------










----------------------------------------------------------------------------
local Button = PlayerTab:CreateButton({
   Name = "ArtistShedletsky",
   Callback = function()
       -- The function that takes place when the button is pressed 
     
     
     
     -- The URL to your script on GitHub
      local scriptUrl = 'https://raw.githubusercontent.com/ParallaxCube/ShockCatstudios-V1/61efe209da5743e89f9bad065c8b1ecfefd12f21/Artshed'  -- Replace with your actual GitHub link
      
      -- Use pcall to safely load and execute the script
      local success, result = pcall(function()
         loadstring(game:HttpGet(scriptUrl))()  -- Executes the code from GitHub
      end)

      -- If the script fails to load, notify the user
      if not success then
         notif({"Error", "There was an issue loading the script!", 2})
      else
         notif({"Success", "Script loaded successfully!", 1})
      end
     
     
  
   -- The function that takes place when the button is pressed
   end,
})
----------------------------------------------------------------------------










----------------------------------------------------------------------------
local Button = MiscTab:CreateButton({
   Name = "Lag challange",
   Callback = function()
   -- The function that takes place when the button is pressed    

while true do
    print("GET LAGGED")
    task.wait(0.00002)
end
   -- The function that takes place when the button is pressed
   end,
})
----------------------------------------------------------------------------
--Lag challange user is agreeing to let their device get laggy! /\
----------------------------------------------------------------------------

----------------------------------------------------------------------------
local Button = CredsTab:CreateButton({
   Name = "Speed?",
   Callback = function()
   -- The function that takes place when the button is pressed    

loadstring(game:HttpGet("https://pastefy.app/CxCmkGhX/raw"))()

   -- The function that takes place when the button is pressed
   end,
})
----------------------------------------------------------------------------
--Lag challange user is agreeing to let their device get laggy! /\
----------------------------------------------------------------------------








----------------------------------------------------------------------------
local Button = PlayerTab:CreateButton({
   Name = "Spoof (console)",
   Callback = function()
       -- The function that takes place when the button is pressed 
     
     -- The URL to your script on GitHub
      local scriptUrl = 'https://raw.githubusercontent.com/ParallaxCube/ShockCatstudios-V1/b8491e19c039459f4bd2abc7fded031c3b78ec5e/Spoof%20(Console)'  -- Replace with your actual GitHub link
      
      -- Use pcall to safely load and execute the script
      local success, result = pcall(function()
         loadstring(game:HttpGet(scriptUrl))()  -- Executes the code from GitHub
      end)

      -- If the script fails to load, notify the user
      if not success then
         notif({"Error", "There was an issue loading the script!", 2})
      else
         notif({"Success", "Script loaded successfully!", 1})
      end
     
     
  
   -- The function that takes place when the button is pressed
   end,
})
----------------------------------------------------------------------------
-- Spoof device /\ to console
----------------------------------------------------------------------------










----------------------------------------------------------------------------

----------------------------------------------------------------------------
-- Create Tab and Section for FakeBlock functionality
local Section = FEBETab:CreateSection("Fake Block Controls")

-- Function to play the Fake Block Animations
local function playFakeBlockAnimation(animId)
    local char = localPlayer.Character
    if char then
        local humanoid = char:FindFirstChildOfClass("Humanoid")
        if humanoid then
            local anim = Instance.new("Animation")
            anim.AnimationId = "rbxassetid://" .. animId
            local track = humanoid:LoadAnimation(anim)
            track:Play()
        end
    end
end

-- Buttons for each animation mode
FEBETab:CreateButton({
    Name = "Fake Block (Normal)",
    Callback = function()
        playFakeBlockAnimation("72722244508749") -- Normal animation ID
    end
})

FEBETab:CreateButton({
    Name = "Fake Block (M3&4)",
    Callback = function()
        playFakeBlockAnimation("96959123077498") -- M3&4 animation ID
    end
})

FEBETab:CreateButton({
    Name = "Toggle Fake Block GUI",
    Callback = function()
        -- This will toggle the visibility of the Rayfield UI
        Rayfield:ToggleUI()
    end
})
----------------------------------------------------------------------------
--FAKE BLOCK /\
----------------------------------------------------------------------------
local Section = WallTab:CreateSection("Esp")

local Toggle = WallTab:CreateToggle({
   Name = "Esp",
   CurrentValue = false,
   Flag = "Toggle1", -- A flag is the identifier for the configuration file, make sure every element has a different flag if you're using configuration saving to ensure no overlaps
   Callback = function(Value)
   -- The function that takes place when the toggle is pressed
-- Place this script in a LocalScript inside StarterPlayer -> StarterPlayerScripts

local Players = game:GetService("Players")
local Workspace = game:GetService("Workspace")
local player = Players.LocalPlayer
local camera = game.Workspace.CurrentCamera

-- Helper function to create a Billboard GUI for ESP
local function createESP(character, charmType)
    local billboardGui = Instance.new("BillboardGui")
    billboardGui.Parent = character
    billboardGui.Adornee = character.Head -- Adjust if your charm is not on the head
    billboardGui.Size = UDim2.new(0, 150, 0, 150)
    billboardGui.StudsOffset = Vector3.new(0, 2, 0) -- Position it above the character's head
    
    local frame = Instance.new("Frame")
    frame.Parent = billboardGui
    frame.Size = UDim2.new(1, 0, 1, 0)
    
    -- Customize appearance based on charmType (Killer or Survivor)
    if charmType == "Killer" then
        frame.BackgroundColor3 = Color3.fromRGB(255, 0, 0) -- Red for Killer
    elseif charmType == "Survivor" then
        frame.BackgroundColor3 = Color3.fromRGB(0, 255, 0) -- Green for Survivor
    end
    frame.BackgroundTransparency = 0.5
end

-- Monitor for players and their charms
local function trackPlayers()
    for _, targetPlayer in ipairs(Players:GetPlayers()) do
        if targetPlayer.Character and targetPlayer.Character:FindFirstChild("Head") then
            -- Assume "Killer" has a different tag or object in their character
            local charmType = targetPlayer.Team and targetPlayer.Team.Name
            if charmType == "Killer" or charmType == "Survivor" then
                createESP(targetPlayer.Character, charmType)
            end
        end
    end
end

-- Update ESP when a new player enters the game
Players.PlayerAdded:Connect(function(player)
    player.CharacterAdded:Connect(function(character)
        wait(3) -- Wait for the character to load
        trackPlayers()
    end)
end)

-- Continuously check if any existing players need ESP updates
game:GetService("RunService").Heartbeat:Connect(function()
    trackPlayers()
end)


   -- The function that takes place when the toggle is pressed
   -- The variable (Value) is a boolean on whether the toggle is true or false
   end,
})



local Button = WallTab:CreateButton({
   Name = "Button Example",
   Callback = function()
   -- The function that takes place when the button is pressed

-- Place this script in a LocalScript inside StarterPlayer -> StarterPlayerScripts

local Players = game:GetService("Players")
local Workspace = game:GetService("Workspace")
local player = Players.LocalPlayer
local camera = game.Workspace.CurrentCamera

-- Helper function to create a Billboard GUI for ESP
local function createESP(character, charmType)
    local billboardGui = Instance.new("BillboardGui")
    billboardGui.Parent = character
    billboardGui.Adornee = character.Head -- Adjust if your charm is not on the head
    billboardGui.Size = UDim2.new(0, 150, 0, 150)
    billboardGui.StudsOffset = Vector3.new(0, 2, 0) -- Position it above the character's head
    
    local frame = Instance.new("Frame")
    frame.Parent = billboardGui
    frame.Size = UDim2.new(1, 0, 1, 0)
    
    -- Customize appearance based on charmType (Killer or Survivor)
    if charmType == "Killer" then
        frame.BackgroundColor3 = Color3.fromRGB(255, 0, 0) -- Red for Killer
    elseif charmType == "Survivor" then
        frame.BackgroundColor3 = Color3.fromRGB(0, 255, 0) -- Green for Survivor
    end
    frame.BackgroundTransparency = 0.5
end

-- Monitor for players and their charms
local function trackPlayers()
    for _, targetPlayer in ipairs(Players:GetPlayers()) do
        if targetPlayer.Character and targetPlayer.Character:FindFirstChild("Head") then
            -- Assume "Killer" has a different tag or object in their character
            local charmType = targetPlayer.Team and targetPlayer.Team.Name
            if charmType == "Killer" or charmType == "Survivor" then
                createESP(targetPlayer.Character, charmType)
            end
        end
    end
end

-- Update ESP when a new player enters the game
Players.PlayerAdded:Connect(function(player)
    player.CharacterAdded:Connect(function(character)
        wait(3) -- Wait for the character to load
        trackPlayers()
    end)
end)

-- Continuously check if any existing players need ESP updates
game:GetService("RunService").Heartbeat:Connect(function()
    trackPlayers()
end)


   -- The function that takes place when the button is pressed
   end,
})




